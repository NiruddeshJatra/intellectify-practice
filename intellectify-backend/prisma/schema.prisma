generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enums
enum Role {
  ADMIN
  REGULAR
  MENTOR
}

enum OAuthProvider {
  GOOGLE
  GITHUB
}

enum ContentStatus {
  DRAFT
  PUBLISHED
}

enum Category {
  GENERAL
  PROGRAMMING_LANGUAGES
  DATA_STRUCTURES_ALGORITHMS
  SYSTEM_DESIGN
  TECH_INSIGHTS
  DATA_AI
  WEB_DEVELOPMENT
}

// Why a separate RefreshToken model?
//
// 1. Security & Token Management:
//    - Track and revoke specific tokens if compromised
//    - Force logout from specific devices
//    - Prevent token reuse attacks
//    - Implement token rotation
//
// 2. Multiple Device Support:
//    - Users can login from multiple devices
//    - Each device gets unique refresh token
//    - Revoke access per device
//    - Track active sessions
//
// 3. Security Monitoring:
//    - Track login patterns
//    - Detect suspicious activities
//    - Audit user sessions
//    - Monitor device usage
//
// Example: If user's phone is stolen:
//   - Can revoke just that device's token
//   - Other devices stay logged in
//   - User remains secure

model RefreshToken {
  id        String    @id @default(uuid())
  token     String    @unique  // Hashed token value
  userId    String
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userAgent String?   // Browser/device info for session management
  expiresAt DateTime  // When this refresh token becomes invalid
  revokedAt DateTime? // Track if token was manually revoked (e.g., on logout)
  createdAt DateTime  @default(now())

  // Index on userId for faster queries when managing user's sessions
  @@index([userId])
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  name      String   // Full name from OAuth or admin input
  avatar    String?  // Profile picture URL from OAuth
  role      Role     @default(REGULAR)

  // OAuth info (nullable for admin users)
  provider          OAuthProvider?
  providerAccountId String? // OAuth provider's user ID (google ID or github ID)

  // Admin authentication (nullable for OAuth users)
  password          String?  // Hashed password for admin users

  // Relations
  refreshTokens     RefreshToken[]
  content          Content[]

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([provider, providerAccountId]) // Prevent duplicate OAuth accounts
  @@map("users")
}

model Content {
  id          String      @id @default(uuid())
  title       String
  content     String      // Rich text content from CKEditor
  excerpt     String?     // Optional short description
  category    Category?   // Category of the content
  subcategory String?     // Optional subcategory (e.g., "javascript", "python")
  status      ContentStatus @default(DRAFT)
  priority    Int         @default(0)  // Custom ordering priority

  // Metadata
  authorId    String
  author      User        @relation(fields: [authorId], references: [id])

  // SEO and display
  slug        String      @unique  // URL-friendly version of title
  metaTitle   String?
  metaDescription String?

  // Timestamps
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  publishedAt DateTime?   // When content was first published

  @@index([status, priority, createdAt])
  @@index([authorId])
  @@map("content")
}